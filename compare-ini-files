#!/usr/bin/env php
<?php
/** 
 * Copyright 2016 Comcast Cable Communications Management, LLC 
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */

/**
* This script compares 2 or more conf files and prints out differences
*/


/**
* Print our syntax and exit.
*/
function printSyntax($progname) {

	printf("!\n"
		. "!Syntax: %s conf_file1 conf_file2 [ conf_file [ conf_file [...] ] ]\n"
		. "!\n", 
		$progname);
	exit(1);

} // End of printSyntax()


/**
* Parse our command-line arguments.
*
* @param array $argv Our array of command line arguments.
*
* @return array An array of parameters that we parsed.
*/
function parseArgs($argv) {

	$retval = array();
	$retval["files"] = array();

	$progname = array_shift($argv);

	if (count($argv) < 2) {
		printSyntax($progname);
	}

	foreach ($argv as $key => $value) {

		if (!is_readable($value)) {
			$error = "File '$value' does not exist or is not readable!";
			throw new Exception($error);
		}

		$retval["files"][] = $value;

	}

	return($retval);

} // End of parseArgs()


/**
* Print up our report header, telling what files we're auditing.
*
* @param array $files Array of filenames we're going to audit.
*/
function printHeader($files) {

	print "#\n";
	print "# Starting config file audit of the following files:\n";
	print "#\n";

	foreach ($files as $key => $value) {
		printf("#\t%s\n", $value);
	}

	print "#\n";

} // End of printHeader()


/**
* Parse our conf file.  Input is expected to be in "ini file" format.
*
* @param string $file The filename
*
* @returna array An array of the stanza names and key/value pairs under them.
*/
function parseConf($file) {

	//
	// Read the contents of the file
	//
	$lines = array();
	$fp = fopen($file, "r");
	while ($line = fgets($fp)) {
		$lines[] = rtrim($line);
	}
	fclose($fp);

	//
	// Parse the contents
	//
	$retval = parseConfLines($lines);

	return($retval);

} // End of parseConf()


/**
* Is this line a stanza?
*
* @return boolean True if the line is, false otherwise.
*/
function parseConfLinesIsStanza($line) {

	$len = strlen($line);

	if ($len == 0) {
		return(false);
	}

	$index = $len - 1;
	$first = $line[0];
	$last = $line[$index];

	if ($first == "[" && $last == "]") {
		return(true);
	}
	
	return(false);

} // End of parseConfLinesIsStanza()


/**
* Extract the name of a stanza from a line.
*
* @param string $line The line containing the stanza.
*
* @return string The name of the stanza, or an empty string if no stanza was found.
*/
function parseConfLinesGetStanzaName($line) {

	$retval = "";

	if (!parseConfLinesIsStanza($line)) {
		return($retval);
	}

	$retval = substr($line, 1, -1);

	return($retval);

} // End of parseConfLinesGetStanzaName()


/**
* Extract the key and value from the line, so long as there is an 
*	equals sign present.
*
* @return array An array where the first value is the key and the
*	second value is the value.
*/
function parseConfLinesGetKeyValue($line) {

	$retval = array("", "");

	//
	// If we don't fine an equals sign, this line is invalid, ignore it!
	//
	$index = strpos($line, "=");

	if (!$index) {
		return($retval);
	}

	$key = substr($line, 0, $index);
	$value = substr($line, $index + 1);

	$key = rtrim($key);
	$value = ltrim($value);
	//print "DEBUG: $line, '$key', '$value'\n";

	$retval = array($key, $value);

	return($retval);

} // End of parseConfLinesGetKeyValue()


/**
* Parse the lines in our conf file.
*
* @param array $lines An array of lines we read from the file.
*
* @return array An arary of the full parsed file.
*/
function parseConfLines($lines) {

	$retval = array();

	$stanza = "";
	foreach ($lines as $key => $value) {
		$line = $value;

		if (parseConfLinesIsStanza($line)) {
			$stanza = parseConfLinesGetStanzaName($line);
			$retval[$stanza] = array();
			continue;
		}

		if (!$stanza) {
			//print "DEBUG: Emtpy stanza, skipping line: $line\n";
			continue;
		}

		list($line_key, $line_value) = parseConfLinesGetKeyValue($line);

		if ($line_key) {
			//print "DEBUG: $stanza: $line_key, $line_value\n";
			$retval[$stanza][$line_key] = $line_value;
		}

	}

	return($retval);

} // End of parseConfLines()


/**
* Load our specified files.
*
* @param array $files An array of file names to load.  These files should be readable.
*
* @return array An array where the key is the base filename and the 
*	value is the array of parsed data.
*
*/
function loadFiles($files) {

	$retval = array();

	foreach ($files as $key => $value) {

		$file = $value;
		//
		// The reason we are using our own ini file parser instead
		// of parse_ini_file() here is because parse_ini_file()
		// actually choked(!!) on transforms.conf.
		//
		$retval["$file"] = parseConf($file);
		//print_r($retval["$file"]); // Debugging
		ksort($retval[$file]);

	}

	return($retval);

} // End of loadFiles()


/**
* This funciton gets a unique list of stanzas across all of the parsed files.
*
* @return array An array of unique stanzas where the key is the stanza.
*/
function getStanzas($data) {

	$retval = array();

	foreach ($data as $key => $value) {
		foreach ($value as $key2 => $value2) {
			$retval[$key2] = true;
		}
	}

	ksort($retval);

	return($retval);

} // End of getStanzas()


/**
* Get all keys from a stanza across multiple files.
*
* @param array $data An array where the key is the filename 
*	and the value an array of stanza data
*
* @return array An array of keys where the key is the name.
*/
function getStanzaKeys($data) {

	$retval = array();

	foreach ($data as $key => $value) {
		foreach ($value as $key2 => $value2) {
			$retval[$key2] = true;
		}
	}

	return($retval);

} // End of getStanzaKeys()


/**
* Custom callback for sorting values.
*/
function stanzaKeySortCallback($a, $b) {

	//print "A/B: $a, $b\n"; // Debugging

	//
	// If one of the values is "notfound", it gets
	// pushed to the end of array.
	//
	if ($a == "notfound") {
		return(1);
	} else if ($b == "notfound") {
		return(-1);
	}

	if ($a < $b) {
		return(-1);
	} else if ($a > $b) {
		return(1);
	} else {
		return(0);
	}

} // End of stanzaKeySortCallback()


/**
* Compare a key from a particular stanza across all files.
*
* @param array $data An array where the key is the file and 
*	the value is the stanza contents.
*
* @param array $keys An array where the key is the name of a stanza key.
*
* @param string $key_name The name of the stanza key we are comparing.
*
* @return array An array where the keys are the values 
*	(or "notfound" if a key wasn't found in a specific file) 
*	and the values are the filenames where that value is found.
*
*/
function compareStanazaKey($data, $keys, $key_name) {

	$retval = array();

	//
	// Loop through the files, and store the value for each key in an array
	// where the value (if present) is the key.  That way we can then go through 
	// the array and see all files match or note.
	//
	foreach ($data as $key2 => $value2) {

		$filename = $key2;

		if (!isset($value2[$key_name])) {
			if (!isset($retval["notfound"])) {
				$retval["notfound"] = array();
			} 

			//print "DEBUG: Key '$key' not found in file '$key2'!\n";
			$retval["notfound"][] = $filename;

		} else {
			$stanza_value = $value2[$key_name];
			if (!isset($retval[$stanza_value])) {
				$retval[$stanza_value] = array();
			}

			$retval[$stanza_value][] = $filename;

		}

	}

	uksort($retval, "stanzaKeySortCallback");

	return($retval);

} // End of compareStanzakey()


/**
* Comapre a stanza across different files.
*
* @param string $stanza The name of the current stanza
*
* @param array $data An array where the key is the file and 
*	the value is the stanza contents.
*
* @return array An array of keys, with each key containing an array of distinct 
*	values for that key and the files those values are found in.
*/
function compareStanza($stanza, $data) {

	$retval = array();

	$keys = getStanzakeys($data);

	//
	// Loop through our keys in the stanza.
	//
	foreach ($keys as $key => $value) {

		$results = compareStanazaKey($data, $keys, $key);
		$retval[$key] = $results;

	}

	return($retval);

} // End of comparseStanza()


/**
* Compare our parsed data and find differences.
*
* @param array $data An array of data where the key is the 
*	filename and the value is the parsed data.
*
* @return array An array of differences.
*/
function compareFiles($data) {

	$retval = array();
	$retval["missing"] = array();
	$retval["diff"] = array();

	$stanzas = getStanzas($data);

	//
	// Loop through our files and look for missing stanzas.
	//
	foreach ($data as $key => $value) {
		$filename = $key;

		foreach ($stanzas as $key2 => $value2) {

			$stanza = $key2;

			if (!isset($value[$stanza])) {
				if (!isset($retval["missing"][$filename])) {
					$retval["missing"][$filename] = array();
				}
				$retval["missing"][$filename][] = $stanza;

			}

		}

	}

	//
	// Now loop through our stanzas and compare them across all files
	//
	foreach ($stanzas as $key => $value) {
		$stanza = $key;

		$results = array();

		foreach ($data as $key2 => $value2) {
			$filename = $key2;

			if (isset($data[$filename][$stanza])) {
				$results[$filename] = $value2[$stanza];
			}

		}

		$retval["diff"][$stanza] = compareStanza($stanza, $results);

	}

	return($retval);

} // End of compareFiles()


/**
* Print up info on stanzas which are missing from files.
*
* @param array $data Array of filenames and the stanzas they are missing.
*/
function printMissingStanzas($data) {

	foreach ($data as $key => $value) {

		print "File: '$key' is missing the following stanzas:\n";

		foreach ($value as $key2 => $value2) {
			print "\t[$value2]\n";
		}

		print "\n";

	}

} // End of printMissingStanzas()


/**
* Print up the differences in a particular stanza.
*
* @param string $name The name of a key in the stanza.
*
* @param array $data An array of the key values and the files those keys are in.
*
*/
function printDiffStanza($name, $data) {

	print "\tKey: '$name' found with multiple values:\n\n";

	foreach ($data as $key2 => $value2) {

		if ($key2 != "notfound") {
			print "\t\tValue '$key2' found in files:\n\n";
		} else {
			print "\t\tThese files did NOT contain the key:\n\n";
		}

		foreach ($value2 as $key3 => $value3) {
			print "\t\t\t$value3\n";
		}

		print("\n");

	}

} // End of printDiffStanza()


/**
* Go through our stanzas and print up stanzas which are different between files.
*/
function printDiffStanzas($data) {

	foreach ($data as $key => $value) {
		$stanza = $key;
		$stanza_printed = false;

		foreach ($value as $key2 => $value2) {

			$num_values = count($value2);

			if ($num_values > 1) {

				if (!$stanza_printed) {
					print "Stanza: [$stanza]\n";
					$stanza_printed = true;
				}

				printDiffStanza($key2, $value2);

			}

		}

	}

}


/**
* Our main entry point.
*/
function main($argv) {

	$params = parseArgs($argv);
	printHeader($params["files"]);

	print "#\n";
	print "# Loading files...\n";
	print "#\n";
	$data = loadFiles($params["files"]);

	print "#\n";
	print "# Comparing contents...\n";
	print "#\n";
	$results = compareFiles($data);
	printMissingStanzas($results["missing"]);
	printDiffStanzas($results["diff"]);

}


try {
	main($argv);

} catch (Exception $e) {
	print $e;

}

